// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

//models

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  role     String
  address  String   @default("None")

  cart     Cart[]   // Relation to Cart model
  products Product[]
  order    Order[] 
  payments Payment[]
  review   Review[]
}

model Product {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  price         Float
  category      String
  salePercentage Float    @default(0)
  stars          Float    @default(0)
  reviews       Int       @default(0)
  quantity      Int
  images        String[]
  seller        Int
  createdAt     DateTime  @default(now())

  sellerId      User      @relation(fields: [seller], references: [id]) // Relation to User
  cart          Cart[]     // Relation to Cart model
  OrderItem     OrderItem[]
  Review        Review[]
}

model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int      
  quantity   Int

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id       Int        @id @default(autoincrement())
  userId   Int
  user     User       @relation(fields: [userId], references: [id])
  items    OrderItem[] // Relation to the join table
  payment  Payment?
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  productId  Int
  quantity   Int

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Payment {
  id        Int      @id @default(autoincrement())
  userId    Int      
  amount    Float
  orderId   Int?     @unique
  createdAt DateTime @default(now())

  customer      User      @relation(fields: [userId], references: [id])
  orderDet     Order?     @relation(fields: [orderId], references: [id])
}

model Review {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int      
  stars      Int      @default(0)

  user       User     @relation(fields: [userId], references: [id])
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}


